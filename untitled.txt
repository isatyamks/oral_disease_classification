# Title: Caries vs Gingivitis Image Classification
# Description: This notebook demonstrates step-by-step how to build, train, and evaluate a deep learning model for image classification.

# Import Libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
from tensorflow.keras.applications import MobileNetV2
import matplotlib.pyplot as plt
import numpy as np
import os
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

# Step 1: Load and Visualize Dataset
# Specify paths
train_path = 'data/train'
test_path = 'data/test'

# Visualize sample images
import matplotlib.image as mpimg

def visualize_images(folder_path, num_images_per_class=5):
    class_names = os.listdir(folder_path)
    plt.figure(figsize=(12, 8))
    for i, class_name in enumerate(class_names):
        class_folder = os.path.join(folder_path, class_name)
        image_files = os.listdir(class_folder)[:num_images_per_class]
        for j, img_name in enumerate(image_files):
            img_path = os.path.join(class_folder, img_name)
            img = mpimg.imread(img_path)
            plt.subplot(len(class_names), num_images_per_class, i * num_images_per_class + j + 1)
            plt.imshow(img)
            plt.title(class_name)
            plt.axis('off')
    plt.suptitle('Sample Images from Dataset', fontsize=16)
    plt.show()

# Visualize training images
visualize_images(train_path)

# Step 2: Data Preprocessing
IMG_SIZE = (224, 224)
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_path, target_size=IMG_SIZE, batch_size=BATCH_SIZE, class_mode='binary'
)

test_generator = test_datagen.flow_from_directory(
    test_path, target_size=IMG_SIZE, batch_size=BATCH_SIZE, class_mode='binary'
)

# Step 3: Build the Model
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
base_model.trainable = False

model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(512, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 4: Train the Model
history = model.fit(
    train_generator,
    validation_data=test_generator,
    epochs=10
)

# Step 5: Visualize Training Process
# Accuracy Graph
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Loss Graph
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Step 6: Evaluate the Model
test_loss, test_acc = model.evaluate(test_generator)
print(f"Test Accuracy: {test_acc:.2f}")

# Classification Report and Confusion Matrix
test_generator.reset()
predictions = model.predict(test_generator)
predicted_classes = (predictions > 0.5).astype(int).ravel()
true_classes = test_generator.classes
class_labels = list(test_generator.class_indices.keys())

print("Classification Report:")
print(classification_report(true_classes, predicted_classes, target_names=class_labels))

# Confusion Matrix
conf_matrix = confusion_matrix(true_classes, predicted_classes)
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=class_labels)
disp.plot(cmap='Blues', values_format='d')
plt.title('Confusion Matrix')
plt.show()

# Step 7: Visualize Predictions
def visualize_predictions(generator, model, num_images=6):
    images, labels = next(generator)
    predictions = model.predict(images)
    plt.figure(figsize=(12, 6))
    for i in range(num_images):
        plt.subplot(2, 3, i+1)
        plt.imshow(images[i])
        true_label = 'Caries' if labels[i] == 0 else 'Gingivitis'
        predicted_label = 'Caries' if predictions[i] < 0.5 else 'Gingivitis'
        plt.title(f"True: {true_label}\nPred: {predicted_label}")
        plt.axis('off')
    plt.suptitle('Model Predictions', fontsize=16)
    plt.show()

visualize_predictions(test_generator, model)

# Step 8: Save the Model
model.save('caries_gingivitis_model.h5')
print("Model saved successfully!")

# Step 9: Load and Test the Model
from tensorflow.keras.models import load_model

loaded_model = load_model('caries_gingivitis_model.h5')
print("Model loaded successfully!")

# Step 10: Insights and Improvements
print("Insights:")
print("- Model achieved a test accuracy of {:.2f}%.".format(test_acc * 100))
print("- Based on the confusion matrix, the misclassifications primarily occur due to ...")
print("- Future improvements: Consider fine-tuning the base model, increasing dataset size, or adding more data augmentation.")
